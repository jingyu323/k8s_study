 

错误恢复：表决、主动冗余、备件、状态同步、检查点回滚。 错误预防：从服务中删除、事务、进程监视器等。
 


性能： 
	常见设计策略：资源调度   优先级队列、增加计算资源、减少计算开销、引入并发机制、采用资源调度

可用性：
	常见设计策略：主动冗余
	
安全性：
	常见设计策略：追踪审计 入侵检测 用户授权，用户认证，追踪审计。

权衡点：是影响多个业务属性的特性，是多个质量属性的敏感点。 更改系统加密级别对安全性能有所提升但是对性能会降低，这是一个权衡点。  绿化报告生成业务的逻辑的描述尚未达成共识，可能导致部分业务功能模块的规则的矛盾，影响系统的可修改性是一个风险点。

横向重用：不同应用领域中的软件元素。数据结构、分类算法、人机界面、通用算法库。


软件架构风格是：描述某特定应用领域中的系统组织方式的惯用模式。一个系统结构定义了一个词汇表和一组约束。

虚拟机风格：包括解释器体系结构风格和规则系统体系结构风格。
数据流体系结构包括：批量处理体系结构风格和管道-过滤器体系结构风格。


软件架构风格：
    1.仓库风格，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行。
	2.C2  通过连接件绑定再一起的按照一组规则运作的并行构件网络。
	风格如下：1.系统中的构件连接件都有一个顶部和底部
	
	

软件架构
	作用：软件架构能够在设计变得相对容易的阶段，考虑系统结构的可选方案，便于技术人员和非技术人员就软件设计进行交互，能够展现软件的结构、属性与内部交互关系。软件架构与用户对系统的功能性需求没有直接的对应关系。
	
	
	

数据库;
	数据完整性是： 有效性、正确性和一致性
	
	
CPS：通过集成感知，计算，通信，控制技术构建了物理空间与信息空间中的各种要素的复杂系统。

自定义类型业务，需要采用虚拟机架构规则系统主要适合专家系统，解释器适合自动的规则


	

软件架构设计：
	基于架构的软件设计：1.分别是对系统进行功能分解、采用架构风格实现质量属性与商业化需求，采用软件模板设计软件架构。
	ABSD方法主要包括6个活动，中架构复审的目标是识别潜在的风险，及早发现架构设计中的缺陷和错误；架构演化活动针对用户的需求变化，修改应用架构，满足新的需求。软件架构文档应该从使用者的角度进行书写，针对不同背景的人员采用不通的书写方式，并将文档分发给相关人员。
	架构文档要保持较新，但不要随时保证最新，要保持文档的稳定性。架构文档的主要输出结果是架构规格说明书和架构质量说明书。
	
	

构件不兼容：
	参数不兼容：接口每一侧的操作有相同的名字，但参数类型或者参数个数不相同
	操作不兼容：提供接口和请求接口的操作名不同
	操作不完备：一个构件提供的接口是另一个构件请求接口的一个子集，或者相反
	
	
	
	
	



实时性：
为了应对数据的实时性，采用实时的数据处理技术。例如流处理技术可以实时处理来自传感器、社交媒体的数据源和数据流，及时发现和响应数据中的变化。同时也需要建立有效的数据更新机制，定期进行更新和维护，以保证数据的质量和可用性

价值巨大：
1.虽然多源异构数据量大且复杂，但是其中蕴含着巨大的价值，通过这些数据的分析和挖掘，可以为企业、科研机构等提供有价值的信息和决策支持。

2. 在商业领域，企业可以整合不同平台的、不同设备的上的用户数据，从而构件更全面的用户画像。例如通过用户的购买记录、浏览行为、社交媒体户动数据，可以里了解用户的兴趣爱好，消费习惯等，从而为用户提供个性化的推荐和营销服务。据统计，采用个性化推荐的电商平台可以提高20%到30%的销售额

3.科研领域多源异构数据可以为科研人员提供更丰富的研究资料。例如通过整合不同科学领域的数据，如生物学，医学、物理学等，可以促进跨学科研究发展。同时利用大数据分析技术可以从海量数据中发现新的轨规律和趋势，推动科学研究的进步

4. 智慧城市建设中，多源异构数据可以实现城市管理的智能化和精细化。例如，通过整合交通、环境、能源等不同的部门的数据，可以实现交通的优化、环境的检测和治理、能源的合理分配等。据相关研究表明，智慧城市建设可以提高城市的管理效率30% 至40%，同时降低能源消耗和环境污染。

多源异构数据的挑战：
1.数据集成难题多。
不同的数据来源