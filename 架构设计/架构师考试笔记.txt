 

错误恢复：表决、主动冗余、备件、状态同步、检查点回滚。 错误预防：从服务中删除、事务、进程监视器等。
 


性能： 
	常见设计策略：资源调度   优先级队列、增加计算资源、减少计算开销、引入并发机制、采用资源调度

可用性：
	常见设计策略：主动冗余
	
安全性：
	常见设计策略：追踪审计 入侵检测 用户授权，用户认证，追踪审计。

权衡点：是影响多个业务属性的特性，是多个质量属性的敏感点。 更改系统加密级别对安全性能有所提升但是对性能会降低，这是一个权衡点。  绿化报告生成业务的逻辑的描述尚未达成共识，可能导致部分业务功能模块的规则的矛盾，影响系统的可修改性是一个风险点。

横向重用：不同应用领域中的软件元素。数据结构、分类算法、人机界面、通用算法库。


软件架构风格是：描述某特定应用领域中的系统组织方式的惯用模式。一个系统结构定义了一个词汇表和一组约束。


软件架构风格：
    1.仓库风格，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行。
	2.
	
	

软件架构
	作用：软件架构能够在设计变得相对容易的阶段，考虑系统结构的可选方案，便于技术人员和非技术人员就软件设计进行交互，能够展现软件的结构、属性与内部交互关系。软件架构与用户对系统的功能性需求没有直接的对应关系。
	
	
	

数据库;
	数据完整性是： 有效性、正确性和一致性